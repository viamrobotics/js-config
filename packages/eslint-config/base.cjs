'use strict';

module.exports = {
  parser: '@typescript-eslint/parser',
  plugins: ['@typescript-eslint'],
  extends: [
    'eslint:recommended',
    'plugin:@typescript-eslint/recommended',
    'plugin:@typescript-eslint/recommended-requiring-type-checking',
    'plugin:@typescript-eslint/strict',
    'plugin:unicorn/recommended',
    'plugin:import/recommended',
    'plugin:import/typescript',
    'plugin:sonarjs/recommended',
    'prettier',
  ],
  parserOptions: {
    sourceType: 'module',
    ecmaVersion: 'latest',
  },
  rules: {
    // Extra built-in rules
    'accessor-pairs': ['error'],
    'array-callback-return': ['error', { checkForEach: true }],
    camelcase: ['error', { properties: 'never' }],
    'class-methods-use-this': ['error'],
    curly: ['error', 'all'],
    'default-case-last': ['error'],
    'default-param-last': ['error'],
    eqeqeq: ['error', 'always', { null: 'always' }],
    'func-names': 'error',
    'func-style': 'error',
    'grouped-accessor-pairs': 'error',
    'guard-for-in': 'error',
    'id-length': [
      'error',
      {
        exceptions: [
          '_',
          'x',
          'y',
          'z',
          'w',
          'r',
          'i',
          'j',
          'k',
          'l',
          'h',
          'a',
          'b',
        ],
      },
    ],
    'line-comment-position': 'error',
    'lines-between-class-members': 'error',
    'logical-assignment-operators': 'error',
    'max-classes-per-file': 'error',
    'max-depth': 'error',
    'max-nested-callbacks': 'error',
    'max-statements-per-line': 'error',
    'multiline-comment-style': 'error',
    'new-cap': 'error',
    'no-alert': 'error',
    'no-await-in-loop': 'error',
    'no-bitwise': 'error',
    'no-caller': 'error',
    'no-console': 'warn',
    'no-constant-binary-expression': 'error',
    'no-constructor-return': 'error',
    'no-debugger': 'warn',
    'no-div-regex': 'error',
    'no-else-return': 'error',
    'no-empty-static-block': 'error',
    'no-eval': 'error',
    'no-extend-native': 'error',
    'no-extra-bind': 'error',
    'no-extra-label': 'error',
    'no-implicit-coercion': 'error',
    'no-implicit-globals': 'error',
    'no-invalid-this': 'error',
    'no-iterator': 'error',
    'no-label-var': 'error',
    'no-labels': 'error',
    'no-lone-blocks': 'error',
    'no-lonely-if': 'error',
    'no-loop-func': 'error',
    'no-multi-assign': 'error',
    'no-multi-str': 'error',
    'no-new': 'error',
    'no-new-func': 'error',
    'no-new-native-nonconstructor': 'error',
    'no-new-object': 'error',
    'no-new-wrappers': 'error',
    'no-octal-escape': 'error',
    'no-param-reassign': 'error',
    'no-plusplus': 'error',
    'no-promise-executor-return': 'error',
    'no-proto': 'error',
    'no-return-assign': 'error',
    'no-script-url': 'error',
    'no-self-compare': 'error',
    'no-sequences': 'error',
    'no-template-curly-in-string': 'error',
    'no-unneeded-ternary': 'error',
    'no-unreachable-loop': 'error',
    'no-undef-init': 'error',
    'no-underscore-dangle': 'error',
    'no-unmodified-loop-condition': 'error',
    'no-unused-expressions': 'error',
    'no-unused-private-class-members': 'error',
    'no-useless-call': 'error',
    'no-useless-computed-key': 'error',
    'no-useless-concat': 'error',
    'no-useless-rename': 'error',
    'no-useless-return': 'error',
    'no-var': 'error',
    'no-void': 'error',
    'object-shorthand': ['error', 'properties'],
    'one-var': ['error', 'never'],
    'operator-assignment': 'error',
    'padding-line-between-statements': 'error',
    'prefer-arrow-callback': 'error',
    'prefer-const': 'error',
    'prefer-destructuring': [
      'error',
      {
        AssignmentExpression: { object: false, array: false },
        VariableDeclarator: { object: true, array: true },
      },
    ],
    'prefer-exponentiation-operator': 'error',
    'prefer-named-capture-group': 'error',
    'prefer-numeric-literals': 'error',
    'prefer-object-has-own': 'error',
    'prefer-object-spread': 'error',
    'prefer-promise-reject-errors': 'error',
    'prefer-regex-literals': 'error',
    'prefer-rest-params': 'error',
    'prefer-spread': 'error',
    'prefer-template': 'error',
    radix: 'error',
    'require-unicode-regexp': 'error',
    'require-atomic-updates': 'error',
    'spaced-comment': ['error', 'always', { markers: ['/'] }],
    strict: 'error',
    'symbol-description': 'error',
    'vars-on-top': 'error',
    yoda: 'error',

    // Extra TypeScript rules
    '@typescript-eslint/return-await': 'error',
    '@typescript-eslint/no-non-null-assertion': 'off',
    '@typescript-eslint/no-unused-vars': ['warn', { argsIgnorePattern: '^_' }],
    '@typescript-eslint/no-use-before-define': [
      'warn',
      {
        functions: false,
        classes: false,
        variables: false,
        allowNamedExports: true,
        ignoreTypeReferences: true,
      },
    ],

    // Extra import rules
    'import/no-absolute-path': 'error',
    'import/no-cycle': 'error',
    'import/no-self-import': 'error',
    'import/no-useless-path-segments': 'error',
    'import/order': 'error',

    // Extra Unicorn rules
    'unicorn/consistent-destructuring': 'off',
    'unicorn/custom-error-definition': 'error',
    'unicorn/no-null': 'off',
    'unicorn/no-unused-properties': 'error',
    'unicorn/prefer-string-replace-all': 'error',
    'unicorn/prefer-top-level-await': 'off',
    'unicorn/prevent-abbreviations': 'off',
  },
  overrides: [
    // CommonJS files are scripts that are allowed to use `require`
    {
      files: ['**/*.cjs'],
      parserOptions: {
        sourceType: 'script',
      },
      env: {
        commonjs: true,
      },
      rules: {
        '@typescript-eslint/no-var-requires': 'off',
      },
    },
  ],
};
